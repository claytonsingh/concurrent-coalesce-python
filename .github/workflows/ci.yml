name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  push:
    tags:
      - 'v*'

jobs:
  release-create:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Set Env
      run: |
        echo "RELEASE_NAME=${GITHUB_REF_NAME} / $(git show -s --format=%cs)" >> ${GITHUB_ENV}
    - name: Create Release
      run: gh release create "${GITHUB_REF_NAME}" --title "${{ env.RELEASE_NAME }}" --generate-notes --draft
      env:
        GITHUB_TOKEN: ${{ github.TOKEN }}

  build-and-test:
    needs: ${{ startsWith(github.ref, 'refs/tags/v') && 'release-create' || '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["2.7", "3.7", "3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        container:
          image: python:${{ matrix.python-version }}-slim

    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        apt-get update
        apt-get install -y gh
    
    - name: Run tests
      run: |
        pytest tests/
    
    - name: Build package (Python 2.7)
      if: matrix.python-version == '2.7'
      run: |
        python -m build --no-isolation --wheel
    
    - name: Build package (Python 3.x)
      if: matrix.python-version != '2.7'
      run: |
        python -m build
    
    - name: Verify package
      run: |
        pip install dist/*.whl

    - name: Upload Release
      if: startsWith(github.ref, 'refs/tags/v') && (matrix.python-version == '2.7' || matrix.python-version == '3.13')
      run: |
        gh release upload "${GITHUB_REF_NAME}" dist/*.whl
      env:
        GITHUB_TOKEN: ${{ github.TOKEN }}

  upload-to-pypi:
    needs: build-and-test
    if: false # startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
    - name: Download from Release
      run: |
        gh release download "${GITHUB_REF_NAME}" --dir dist
      env:
        GITHUB_TOKEN: ${{ github.TOKEN }}

    - name: Upload to PyPI
      run: |
        python -m pip install --upgrade pip
        pip install twine
        python -m twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
